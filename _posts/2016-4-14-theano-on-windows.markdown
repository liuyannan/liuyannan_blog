---
layout: page
title:  "Make Theano runnable on Windows 7"
categories: Python Theano DeepLearning
tags: Python Theaon DeepLearning dlltool
date:   2016-04-14 11:54:00 +08:00
---

Recently, I am studying deaplearning and learned Theaon a good tool for Neural Network implementation. However, there are some difficulties in making Thearon work on windows.

# Theano

[Theano](http://deeplearning.net/software/theano/index.html) is a python library to evaluate computation graph (i.e. expression) efficiently. I think the most important thing is that, it can calculate the gradient automatically, which make it suitable for Neural Network implementation.

Theano can speed up the computing by transforming python code into C/C++ code, even with Nvidia CUDA. Theano requires gcc/g++ for c/c++ compiling. SO we need to install gcc/g++ compiler on windows.

*You can use Theano without g++ compiler. In that case, the computation is done natively with python, and the speed is horrible.*

# System Configuration

CPU: Intel Xeon E5-1620  
GPU: Quadro K600   
Python: 2.7 32-bit  
OS: Windows 7 64-bit

# Procedure

I mainly followed the official tutorial [here](http://deeplearning.net/software/theano/install_windows.html). But two problems occurred during installation, and I solved as follows.

First, when I install the CUDA 5.5 on my computer. The driver installer said no CUDA supported device was detected. According to information from Internet, it seems 5.5 CUDA driver is too old and it maybe released before my CPU card. So I simply skip this.

*NOTE: At the point I posted this blog, I haven finished testing the CUDA function. So CUDA maybe not fully workable.*

Second, when I test the Theano with an example NN, it reported the following error,

```
C:\Python27\libs/libpython27.a(dmmes00245.o):(.idata$7+0x0): undefined reference to `_head_C__build27_cpython_PCBuild_li
bpython27_a'
C:\Python27\libs/libpython27.a(dmmes00273.o):(.idata$7+0x0): undefined reference to `_head_C__build27_cpython_PCBuild_li
bpython27_a'
C:\Python27\libs/libpython27.a(dmmes00054.o):(.idata$7+0x0): undefined reference to `_head_C__build27_cpython_PCBuild_li
bpython27_a'
C:\Python27\libs/libpython27.a(dmmes01026.o):(.idata$7+0x0): undefined reference to `_head_C__build27_cpython_PCBuild_li
bpython27_a'
C:\Python27\libs/libpython27.a(dmmes00253.o):(.idata$7+0x0): undefined reference to `_head_C__build27_cpython_PCBuild_li
bpython27_a'
C:\Python27\libs/libpython27.a(dmmes00207.o):(.idata$7+0x0): more undefined references to `_head_C__build27_cpython_PCBu
ild_libpython27_a' follow
...
```

I found this was because the libpython27.a containing certain problem, as said [here](http://stackoverflow.com/questions/32555087/unable-to-install-pyslalib-package-using-python2-7-mingw-on-windows-10). I follow the method in that post to rebuild a libpython27.a from python27.dll. The detailed steps are quoted as below.

> To create Python extensions, you need to link against the Python library. Unfortunately, most Python distributions are provided with  Python27.lib, a library in Microsoft Visual C++ format. GCC expects a .a file (libpython27.a to be precise.). Here's how to convert  python27.lib to libpython27.a:
>
> 1. Download pexport (from here or https://web.archive.org/web/20000829082704/http://starship.python.net/crew/kernr/mingw32/pexports-0.42h.zip).
> 2. Get  Python27.dll (it should be somewhere on your harddrive).
> 3. Run :  pexports python27.dll > python27.def This will extract all symbols from python27.dll and write them into python27.def.
>4. Run : dlltool --dllname python27.dll --def python27.def --output-lib libpython27.a This will create libpython27.a (dlltool is part of MinGW utilities).
>5. Copy libpython27.a to c:\python27\libs\ (in the same directory as  python27.lib).
> This trick should work for all Python versions, including future releases of Python. You can also use this trick to convert other libraries.

But, the dlltoll in the fourth step reports a syntax error in my case,

```
C:\TDM-GCC-32\bin\dlltool.exe: Syntax error in def file ./python27.def:0
```
This error maybe caused by encoding of python27.def, generated by pexports. I found the raw python27.def file is encoded by "UCS2 LE BOM", shown by NotePad++. So a transform the python27.def in to UTF8 encoding, and the error disappeared in step 4.

*NOTE: python27.dll on windows7 64bit system is located in c:/windows/syswow64/*
